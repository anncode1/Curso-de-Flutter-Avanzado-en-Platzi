/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/target.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "Timestamp.pbobjc.h"
#endif

 #import "Target.pbobjc.h"
 #import "Firestore.pbobjc.h"
 #import "Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - FSTPBTargetRoot

@implementation FSTPBTargetRoot


@end

#pragma mark - FSTPBTargetRoot_FileDescriptor

static GPBFileDescriptor *FSTPBTargetRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"firestore.client"
                                                 objcPrefix:@"FSTPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FSTPBTarget

@implementation FSTPBTarget

@dynamic targetTypeOneOfCase;
@dynamic targetId;
@dynamic hasSnapshotVersion, snapshotVersion;
@dynamic resumeToken;
@dynamic lastListenSequenceNumber;
@dynamic query;
@dynamic documents;

typedef struct FSTPBTarget__storage_ {
  uint32_t _has_storage_[2];
  int32_t targetId;
  GPBTimestamp *snapshotVersion;
  NSData *resumeToken;
  GCFSTarget_QueryTarget *query;
  GCFSTarget_DocumentsTarget *documents;
  int64_t lastListenSequenceNumber;
} FSTPBTarget__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "targetId",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTarget_FieldNumber_TargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, targetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "snapshotVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = FSTPBTarget_FieldNumber_SnapshotVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, snapshotVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resumeToken",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTarget_FieldNumber_ResumeToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, resumeToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "lastListenSequenceNumber",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTarget_FieldNumber_LastListenSequenceNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, lastListenSequenceNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "query",
        .dataTypeSpecific.className = GPBStringifySymbol(GCFSTarget_QueryTarget),
        .number = FSTPBTarget_FieldNumber_Query,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "documents",
        .dataTypeSpecific.className = GPBStringifySymbol(GCFSTarget_DocumentsTarget),
        .number = FSTPBTarget_FieldNumber_Documents,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FSTPBTarget__storage_, documents),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FSTPBTarget class]
                                     rootClass:[FSTPBTargetRoot class]
                                          file:FSTPBTargetRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FSTPBTarget__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "targetType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FSTPBTarget_ClearTargetTypeOneOfCase(FSTPBTarget *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - FSTPBTargetGlobal

@implementation FSTPBTargetGlobal

@dynamic highestTargetId;
@dynamic highestListenSequenceNumber;
@dynamic hasLastRemoteSnapshotVersion, lastRemoteSnapshotVersion;
@dynamic targetCount;

typedef struct FSTPBTargetGlobal__storage_ {
  uint32_t _has_storage_[1];
  int32_t highestTargetId;
  int32_t targetCount;
  GPBTimestamp *lastRemoteSnapshotVersion;
  int64_t highestListenSequenceNumber;
} FSTPBTargetGlobal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "highestTargetId",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTargetGlobal_FieldNumber_HighestTargetId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FSTPBTargetGlobal__storage_, highestTargetId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "highestListenSequenceNumber",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTargetGlobal_FieldNumber_HighestListenSequenceNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FSTPBTargetGlobal__storage_, highestListenSequenceNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastRemoteSnapshotVersion",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = FSTPBTargetGlobal_FieldNumber_LastRemoteSnapshotVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FSTPBTargetGlobal__storage_, lastRemoteSnapshotVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetCount",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBTargetGlobal_FieldNumber_TargetCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FSTPBTargetGlobal__storage_, targetCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FSTPBTargetGlobal class]
                                     rootClass:[FSTPBTargetRoot class]
                                          file:FSTPBTargetRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FSTPBTargetGlobal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

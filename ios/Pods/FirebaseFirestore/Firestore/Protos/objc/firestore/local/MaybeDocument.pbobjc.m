/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/maybe_document.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "Timestamp.pbobjc.h"
#endif

 #import "MaybeDocument.pbobjc.h"
 #import "Document.pbobjc.h"
 #import "Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - FSTPBMaybeDocumentRoot

@implementation FSTPBMaybeDocumentRoot


@end

#pragma mark - FSTPBMaybeDocumentRoot_FileDescriptor

static GPBFileDescriptor *FSTPBMaybeDocumentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"firestore.client"
                                                 objcPrefix:@"FSTPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FSTPBNoDocument

@implementation FSTPBNoDocument

@dynamic name;
@dynamic hasReadTime, readTime;

typedef struct FSTPBNoDocument__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBTimestamp *readTime;
} FSTPBNoDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBNoDocument_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FSTPBNoDocument__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "readTime",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = FSTPBNoDocument_FieldNumber_ReadTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FSTPBNoDocument__storage_, readTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FSTPBNoDocument class]
                                     rootClass:[FSTPBMaybeDocumentRoot class]
                                          file:FSTPBMaybeDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FSTPBNoDocument__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FSTPBUnknownDocument

@implementation FSTPBUnknownDocument

@dynamic name;
@dynamic hasVersion, version;

typedef struct FSTPBUnknownDocument__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  GPBTimestamp *version;
} FSTPBUnknownDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBUnknownDocument_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FSTPBUnknownDocument__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = FSTPBUnknownDocument_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FSTPBUnknownDocument__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FSTPBUnknownDocument class]
                                     rootClass:[FSTPBMaybeDocumentRoot class]
                                          file:FSTPBMaybeDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FSTPBUnknownDocument__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FSTPBMaybeDocument

@implementation FSTPBMaybeDocument

@dynamic documentTypeOneOfCase;
@dynamic noDocument;
@dynamic document;
@dynamic unknownDocument;
@dynamic hasCommittedMutations;

typedef struct FSTPBMaybeDocument__storage_ {
  uint32_t _has_storage_[2];
  FSTPBNoDocument *noDocument;
  GCFSDocument *document;
  FSTPBUnknownDocument *unknownDocument;
} FSTPBMaybeDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "noDocument",
        .dataTypeSpecific.className = GPBStringifySymbol(FSTPBNoDocument),
        .number = FSTPBMaybeDocument_FieldNumber_NoDocument,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FSTPBMaybeDocument__storage_, noDocument),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "document",
        .dataTypeSpecific.className = GPBStringifySymbol(GCFSDocument),
        .number = FSTPBMaybeDocument_FieldNumber_Document,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FSTPBMaybeDocument__storage_, document),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unknownDocument",
        .dataTypeSpecific.className = GPBStringifySymbol(FSTPBUnknownDocument),
        .number = FSTPBMaybeDocument_FieldNumber_UnknownDocument,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FSTPBMaybeDocument__storage_, unknownDocument),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasCommittedMutations",
        .dataTypeSpecific.className = NULL,
        .number = FSTPBMaybeDocument_FieldNumber_HasCommittedMutations,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FSTPBMaybeDocument class]
                                     rootClass:[FSTPBMaybeDocumentRoot class]
                                          file:FSTPBMaybeDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FSTPBMaybeDocument__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "documentType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FSTPBMaybeDocument_ClearDocumentTypeOneOfCase(FSTPBMaybeDocument *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
